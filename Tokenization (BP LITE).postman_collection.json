{
	"info": {
		"_postman_id": "3de31188-0f81-490b-b977-482267a547ee",
		"name": "Tokenization (BP LITE)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5015714"
	},
	"item": [
		{
			"name": "Create Verification URL",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"reference_id\": \"REF0005\",\r\n    \"hash\": \"{{hash}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/cards/token/v1/create",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"cards",
						"token",
						"v1",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Charge Card by Using Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"invoice\": \"INV005\",\r\n    \"amount\": \"1.50\",\r\n    \"token\": \"551ea3bd52bb185e8d2e7b7c2a72de49df45ac97fa4ff5deb5c7e2805b23a5f8\",\r\n    \"hash\": \"{{hash}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/cards/token/v1/pay/sandbox",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"cards",
						"token",
						"v1",
						"pay",
						"sandbox"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Card",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"token\": \"551ea3bd52bb185e8d2e7b7c2a72de49df45ac97fa4ff5deb5c7e2805b23a5f8\",\r\n    \"hash\": \"{{hash}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/cards/token/v1/delete_token/sandbox",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"cards",
						"token",
						"v1",
						"delete_token",
						"sandbox"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Available Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"hash\": \"{{hash}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/cards/token/v1/get_token",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"cards",
						"token",
						"v1",
						"get_token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Token Details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"refID = data._refID;\r",
							"\r",
							"pm.globals.set('refID', refID);\r",
							"\r",
							"var str = apikey + \"|\" + mid + \"|\" + refID;\r",
							"\r",
							"console.log(str);\r",
							"\r",
							"//MD5 encryption of STR\r",
							"var strmd5= CryptoJS.MD5(str).toString();\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"hash\": \"{{hash}}\",\r\n\r\n    \"_refID\": \"QNPSAMPLETEST0116\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/cards/token/v1/get_token_details/{{refID}}",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"cards",
						"token",
						"v1",
						"get_token_details",
						"{{refID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Transactions",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"var str = apikey + \"|\" + mid;\r",
							"\r",
							"console.log(str);\r",
							"\r",
							"//MD5 encryption of STR\r",
							"var strmd5= CryptoJS.MD5(str).toString();\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"hash\": \"{{hash}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/cards/token/v1/get_transaction",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"cards",
						"token",
						"v1",
						"get_transaction"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Transactions Details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"invoice = data._invoice;\r",
							"\r",
							"pm.globals.set('invoice', invoice);\r",
							"\r",
							"var str = apikey + \"|\" + mid + \"|\" + invoice;\r",
							"\r",
							"console.log(str);\r",
							"\r",
							"//MD5 encryption of STR\r",
							"var strmd5= CryptoJS.MD5(str).toString();\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"hash\": \"{{hash}}\",\r\n\r\n    \"_invoice\": \"INV003\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/cards/token/v1/get_transaction_details/{{invoice}}",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"cards",
						"token",
						"v1",
						"get_transaction_details",
						"{{invoice}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APIKEY",
			"value": "",
			"type": "string"
		},
		{
			"key": "MERCHANTID",
			"value": "",
			"type": "string"
		}
	]
}