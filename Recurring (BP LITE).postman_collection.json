{
	"info": {
		"_postman_id": "6319271b-51a5-4b70-95b6-1d5bcc737d66",
		"name": "Recurring (BP LITE) (SANDBOX)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5015714"
	},
	"item": [
		{
			"name": "Add subscriptions Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"console.log(mid);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"//MD5 encryption of STR\r",
							"// var strmd5= CryptoJS.MD5(hashString).toString();\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"subscription_type\": \"fixed\",\r\n\r\n    \"subscription_id\": \"SUBSCRIPTION08\",\r\n    \"name\": \"Monthly Subscription\",\r\n    \"purpose\": \"Music Subscription 1\",\r\n\r\n    \"repayment_periods\": \r\n    [\r\n        {\r\n            \"totalMonth\":\"10\",\r\n            \"amount\":\"100.00\"\r\n        }\r\n    ],\r\n\r\n    \"hash\": \"{{hash}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/recurring/v1/bplite/add_subscription",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"recurring",
						"v1",
						"bplite",
						"add_subscription"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add subscriber Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object')\r",
							"        {\r",
							"            parentSorted = sorted[key];\r",
							"\r",
							"            Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                if(typeof parentSorted[parentKey] === 'object')\r",
							"                {\r",
							"                    childSorted = parentSorted[parentKey];\r",
							"\r",
							"                    Object.keys(childSorted).forEach(childKey => {\r",
							"                        hashString += childSorted[childKey];\r",
							"                        hashFormat += childKey + \" + \";\r",
							"                    })\r",
							"                }\r",
							"                else\r",
							"                {\r",
							"                    hashString += parentSorted[parentKey];\r",
							"                    hashFormat += parentKey + \" + \";\r",
							"                }\r",
							"            })\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"subscriber_details\": \r\n    {\r\n        \r\n        \"id_number\":\"950711251499\",\r\n        \"id_type\":\"1\",\r\n        \"reference_no\":\"1000002\",\r\n        \"email\":\"john@gmail.com\",\r\n        \"name\":\"JOHN ONE\",\r\n        \"phone\":\"60123456789\"\r\n        \r\n    },\r\n\r\n    \"subscription_id\": \"SUBSCRIPTION06\",\r\n\r\n    \"repayment_periods\": \r\n    [\r\n        {\r\n            \"totalMonth\":\"10\",\r\n            \"amount\":\"100\"        \r\n        }\r\n    ],\r\n\r\n    \"hash\": \"{{hash}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/recurring/v1/bplite/add_subscriber",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"recurring",
						"v1",
						"bplite",
						"add_subscriber"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Subscription Data Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"hash\": \"{{hash}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/recurring/v1/bplite/get_subscription",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"recurring",
						"v1",
						"bplite",
						"get_subscription"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Subscriptions Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"subscription_id\": \"SUBSCRIPTION04\",\r\n    \"hash\": \"{{hash}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/recurring/v1/bplite/get_subscription_details",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"recurring",
						"v1",
						"bplite",
						"get_subscription_details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Subscribers Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"subscription_id\": \"SUBSCRIPTION04\",\r\n    \"hash\": \"{{hash}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/recurring/v1/bplite/get_subscribers",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"recurring",
						"v1",
						"bplite",
						"get_subscribers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Subscriber Data Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"system_subscriber_id\": 1024,\r\n    \"hash\": \"{{hash}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/recurring/v1/bplite/get_subscriber_details",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"recurring",
						"v1",
						"bplite",
						"get_subscriber_details"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Subscriber Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"system_subscriber_id\": \"1024\",\r\n    \"price\": \"90.00\",\r\n    \"last_date_payment\": \"2025-05-01\",\r\n    \"subscriber_details\": \r\n    {\r\n        \r\n        \"email\":\"shahrul@gmail.com\",\r\n        \"phone\":\"60173649224\"\r\n        \r\n    },\r\n    \"hash\": \"{{hash}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/recurring/v1/bplite/update_subscriber",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"recurring",
						"v1",
						"bplite",
						"update_subscriber"
					]
				}
			},
			"response": []
		},
		{
			"name": "Terminate Subscriber Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"apikey = pm.collectionVariables.get(\"APIKEY\");\r",
							"mid = pm.collectionVariables.get(\"MERCHANTID\");\r",
							"pm.globals.set('mid', mid);\r",
							"\r",
							"data = JSON.parse(request.data);\r",
							"\r",
							"data.merchant_id = mid;\r",
							"\r",
							"const sorted = Object.keys(data)\r",
							"  .sort()\r",
							"  .reduce((accumulator, key) => {\r",
							"    accumulator[key] = data[key];\r",
							"\r",
							"    return accumulator;\r",
							"  }, {});\r",
							"\r",
							"var hashFormat = '';\r",
							"var hashString = '';\r",
							"\r",
							"Object.keys(sorted).forEach(key => {\r",
							"\r",
							"    if(key != 'hash')\r",
							"    {\r",
							"        if(typeof sorted[key] === 'object'){\r",
							"\r",
							"        parentSorted = sorted[key];\r",
							"\r",
							"        Object.keys(parentSorted).forEach(parentKey => {\r",
							"\r",
							"                childSorted = parentSorted[parentKey];\r",
							"\r",
							"                Object.keys(childSorted).forEach(childKey => {\r",
							"                    hashString += childSorted[childKey];\r",
							"                    hashFormat += childKey + \" + \";\r",
							"                })\r",
							"        })\r",
							"    }else{\r",
							"            hashString += sorted[key];\r",
							"            hashFormat += key + \" + \";\r",
							"    }\r",
							"\r",
							"    }\r",
							"  \r",
							"});\r",
							"\r",
							"hashFormat = hashFormat.substring(0, hashFormat.length - 3);\r",
							"hashString = hashString.replace(/\\s+/g, '');\r",
							"\r",
							"console.log(hashFormat); //Hash Format String for you reference\r",
							"console.log(hashString); //Hash String to be encrypt\r",
							"\r",
							"var crypto = require('crypto-js');\r",
							"\r",
							"strmd5 = crypto.HmacSHA256(hashString, apikey).toString(CryptoJS.enc.Hex);\r",
							"\r",
							"pm.globals.set('hash', strmd5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merchant_id\": \"{{mid}}\",\r\n    \"system_subscriber_id\": \"2034\",\r\n    \"hash\": \"{{hash}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.demo.betterpay.me/merchant/api/recurring/v1/bplite/terminate",
					"protocol": "https",
					"host": [
						"www",
						"demo",
						"betterpay",
						"me"
					],
					"path": [
						"merchant",
						"api",
						"recurring",
						"v1",
						"bplite",
						"terminate"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "MERCHANTID",
			"value": "",
			"type": "string"
		},
		{
			"key": "APIKEY",
			"value": "",
			"type": "string"
		}
	]
}